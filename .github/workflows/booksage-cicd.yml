name: BookSage CI/CD Pipeline

permissions:
  contents: write
  packages: write

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  validate-code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt flake8 pytest pytest-flask

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  validate-templates:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install flask jinja2 beautifulsoup4

      - name: Validate HTML templates
        run: |
          if [ -f scripts/validate_html.py ]; then
            python scripts/validate_html.py
          else
            echo "WARNING: scripts/validate_html.py not found! Skipping..."
          fi

  build:
    needs: [validate-code, validate-templates]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r templates deployment/ || echo "No templates directory found"
          cp -r static deployment/ || mkdir -p deployment/static
          cp *.py deployment/ || echo "No Python files found at root"
          cp requirements.txt deployment/ || echo "No requirements.txt found"
          cp database.db deployment/ || echo "No database.db found"
          cd deployment && zip -r ../booksage-app.zip .

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: booksage-app
          path: booksage-app.zip

  create-executable:
    needs: build
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: booksage-app
          path: .

      - name: Extract build files
        run: |
          if (Test-Path extracted) { Remove-Item extracted -Recurse -Force }
          Expand-Archive -Path booksage-app.zip -DestinationPath extracted

      - name: Debug directory contents
        run: |
          echo "Listing extracted directory contents:"
          Get-ChildItem -Path extracted -Recurse | Select-Object FullName

      - name: Install dependencies
        run: |
          cd extracted
          pip install -r requirements.txt pyinstaller

      - name: Check database existence
        run: |
          if (-Not (Test-Path "extracted/database.db")) {
            echo "WARNING: database.db not found, copying from repository"
            Copy-Item -Path database.db -Destination extracted/ -ErrorAction SilentlyContinue
          }

      - name: Create PyInstaller executable
        run: |
          cd extracted
          # Use app.py as the entry point since that's your main application file
          pyinstaller --onefile --add-data "templates;templates" --add-data "static;static" --add-data "database.db;." app.py

      - name: Package final application
        run: |
          cd extracted/dist
          Compress-Archive -Path * -DestinationPath ../../BookSage_App.zip

      - name: Upload executable package
        uses: actions/upload-artifact@v4
        with:
          name: booksage-executable
          path: BookSage_App.zip

  create-release:
    needs: [build, create-executable]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download zip artifact
        uses: actions/download-artifact@v4
        with:
          name: booksage-app
          path: .

      - name: Download executable artifact
        uses: actions/download-artifact@v4
        with:
          name: booksage-executable
          path: .

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          name: "Release ${{ github.run_number }}"
          draft: false
          prerelease: false
          files: |
            booksage-app.zip
            BookSage_App.zip