name: BookSage CI/CD Pipeline

# Add permissions at the top level
permissions:
  contents: write
  packages: write

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  validate-code:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install flake8 pytest pytest-flask
      
      - name: Lint with flake8
        continue-on-error: true
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  
  validate-templates:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flask jinja2 beautifulsoup4
      
      - name: Create HTML validator script
        run: |
          cat > validate_html.py << 'EOF'
          import os
          import re

          TEMPLATES_DIR = 'templates'
          issues_found = False

          def check_html_comments(file_path):
              try:
                  with open(file_path, 'r', encoding='utf-8') as f:
                      content = f.read()
                  
                  # Check for malformed HTML comments
                  lines = content.split('\n')
                  for i, line in enumerate(lines):
                      line = line.strip()
                      if line.startswith('-') and '-->' in line and not line.startswith('<!--'):
                          print(f'ERROR in {file_path}, line {i+1}: Malformed HTML comment: {line}')
                          return True
                  
                  return False
              except Exception as e:
                  print(f"Error processing {file_path}: {e}")
                  return False

          # Process all HTML files if the directory exists
          if os.path.exists(TEMPLATES_DIR):
              print(f"Checking HTML files in {TEMPLATES_DIR}")
              for root, dirs, files in os.walk(TEMPLATES_DIR):
                  for file in files:
                      if file.endswith('.html'):
                          file_path = os.path.join(root, file)
                          print(f"Checking {file_path}")
                          if check_html_comments(file_path):
                              issues_found = True
          else:
              print('Templates directory not found, skipping check')

          # Exit with success always (just log warnings)
          if issues_found:
              print('WARNING: HTML comment issues detected')
          else:
              print('SUCCESS: No HTML comment issues detected')
          EOF
      
      - name: Run HTML validation
        run: python validate_html.py
  
  build:
    needs: [validate-code, validate-templates]
    if: success() || failure()  # Continue even if validation shows issues
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Create deployment package
        run: |
          mkdir -p deployment
          cp -r templates deployment/ || echo "No templates directory found"
          cp -r static deployment/ || mkdir -p deployment/static
          cp *.py deployment/ || echo "No Python files found at root"
          if [ -f requirements.txt ]; then cp requirements.txt deployment/; fi
          cd deployment && zip -r ../booksage-app.zip .
      
      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: booksage-app
          path: booksage-app.zip

  create-release:
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: booksage-app
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: booksage-app.zip
          tag_name: v${{ github.run_number }}
          name: Release ${{ github.run_number }}
          draft: false
          prerelease: false